name: CD with Gradle

# main branch에 push, pr 되었을 때 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Github Actions에서 사용하는 VM이 읽을 수 있도록 허용
permissions:
  contents: read

# 수행할 동작들을 정의
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행
    
    steps:
    # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v3
    
    # openJDK 17 버전 환경을 셋팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # adopt는 더이상 업데이트 되지 않으므로 temurin 권장.
    
    # GitHub secrets에서 설정한 데이터를 받아 워크 플로우에 파일 생성.
    - name: Make application.properties
      run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties

    # gradle을 통해 소스를 build
    # gradlew 파일에 실행 권한을 제거하고, clean 후 테스트 없이 다시 build 
    - name: Build with Gradle
      run: |
          chmod -x ./gradlew 
          ./gradlew clean build -x test
        
    # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push
    - name: Docker build & push to docker repo
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/moment_film .
          docker push ${{ secrets.DOCKER_REPO }}/moment_film
   
   # appleboy/ssh-action@master 액션을 사용하여 서버에 ssh 접속 후 script 실행
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      id: deploy
      with:
       host: ${{ secrets.HOST }}
       username: ${{ secrets.USERNAME }}
       password: ${{ secrets.PASSWORD }}
       port: 22
       script: |
         sudo docker rm -f $(docker ps -qa)
         sudo docker pull ${{ secrets.DOCKER_REPO }}/moment_film
         docker-compose up -d
         docker image prune -f
